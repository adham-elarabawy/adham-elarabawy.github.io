"use strict";(self.webpackChunkmy_gatsby_site=self.webpackChunkmy_gatsby_site||[]).push([[228],{5566:function(e,t,n){n.r(t),n.d(t,{default:function(){return g}});var a=n(8453),i=n(6540);function r(e){const t=Object.assign({h4:"h4",p:"p",a:"a",em:"em",code:"code"},(0,a.RP)(),e.components);return i.createElement(i.Fragment,null,i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("img",{src:"/images/drivetrain-demo.gif",alt:"Alt text",title:"Image Title",style:{width:"350px"}})),"\n",i.createElement(t.h4,null,"Introduction"),"\n",i.createElement(t.p,null,"After 3 years of high school robotics, working primarily on differential drives, I was slightly frustrated by the inaccuracies stemming primarily from elementary mechanical tolerances. Considering that I was about to graduate from this level of high school robotics into my undergraduate studies at Berkeley, I decided to undertake this project to formalize all that I learned into a 'from-scratch', 'start-to-finish' differential drive system where I had control over every single step along the design process."),"\n",i.createElement(t.h4,null,"Design Process"),"\n",i.createElement(t.p,null,"My first step was to decide on the motors I wanted to use. I had it narrowed down to two options. Firstly, I could go the brushed motor route (very similar to what I had done previously in FRC), characterize the motors and determine a voltage-velocity equation and solve for the arbitrary constants, then design and tune a velocity PID controller. Although familiar, I really wanted to take my precision and accuracy up a notch, so I decided to go the second route. The second option (that I picked) was to use stepper motors, which are inherently accurate and precise (assuming the load isn't too large), since I would just be able to tell the motors to go to a velocity and assume they reached it semi-instantaneously. An added benefit was not having to worry about encoders."),"\n",i.createElement(t.p,null,"This design choice came in the form of NEMA-17 motors and DRV-8825 stepper drivers. Electronics-wise, I decided on using an arduino nano for interfacing with the stepper drivers, and a raspberry pi for all the higher-level control and controller interface."),"\n",i.createElement(t.p,null,"I then designed and 3D-printed the precision platform, seen here:"),"\n",i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("img",{src:"/images/drivetrain_model.png",alt:"Alt text",title:"Image Title",style:{width:"350px"}})),"\n",i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("img",{src:"/images/final_drivetrain.JPG",alt:"Alt text",title:"Image Title",style:{width:"350px","-webkit-transform":"scaleX(-1)",transform:"scaleX(-1)"}})),"\n",i.createElement(t.p,null,"You can find the source code for base control (for both the arduino & RPi) ",i.createElement(t.a,{href:"https://github.com/adham-elarabawy/Precision-Drivetrain-Platform"},"on my github.")),"\n",i.createElement(t.p,null,"I also created a custom drive controller board that handled the interface between the arduino nano and the DRV stepper drivers:"),"\n",i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("img",{src:"/images/drivetrain_top_board.jpg",alt:"Alt text",title:"Image Title",style:{width:"200px"}})),"\n",i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("img",{src:"/images/drivetrain_bottom_board.jpg",alt:"Alt text",title:"Image Title",style:{width:"200px"}})),"\n",i.createElement(t.p,null,"By this point, I could drive the robot with an xbox controller by using some simple differential drive logic to map the joystick values to velocities for the left & right sides of the drivetrain."),"\n",i.createElement(t.h4,null,"Path Generation & Pursuit"),"\n",i.createElement(t.p,null,"Now that I had a working drivetrain that I could precisely control, I decided to implement a path generation and pursuit suite. The basic premise is as follows: I wanted to be able to select waypoints with a specified heading (global yaw), and the suite should find a continuous path of continuous curvature (since this is a differential drive after all) constrained by the selected waypoints. Then, I wanted the suite to create a time-parametrized trajectory from the aforementioned path using the velocity and acceleration constraints of the platform."),"\n",i.createElement(t.p,null,"This didn't turn out to be trivial. After doing some research, I decided that I wanted to use Quintic Hermite Spline interpolation to determine the path, since it is the only option that I could find that had C2 continuity (curvature continuity) & properly constrained the output path to the given waypoints and their specified tangents. The more popular options (i.e. Bezier Curves & Cubic Hermite Splines) either only had C1 continuity (which would result in jerky turning) or didn't actually ",i.createElement(t.em,null,"constrain")," the path to the points, rather merely getting the path somewhat close to the points. The below chart summarizes the clear disadvantage of cubic splines quite well, and ",i.createElement(t.a,{href:"http://www2.informatik.uni-freiburg.de/~lau/students/Sprunk2008.pdf"},"this paper")," outlined the choice for quintic hermite splines clearly."),"\n",i.createElement(t.p,null,i.createElement(t.em,null,'Note: If there is only one polynomial segment, the spline is often called a BÃ©zier curve. If each segment is described by its ending positions and derivatives, it is said to be in "Hermite" form.')),"\n",i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("img",{src:"/images/drivetrain_chart.png",alt:"Alt text",title:"Image Title",style:{width:"300px"}})),"\n",i.createElement(t.p,null,"Then, it was just a matter of using a trapezoidal motion profile to find the corresponding velocity and acceleration for evenly spaced points to create a trajectory. But wait! Evenly spaced points? Well, it's quite hard to derive a fully continuous trajectory function, so what I did was determine the acceleration and velocity for a whole bunch of evenly spaced points on the path, then during runtime, I sample this model of the trajectory by passing in the elapsed time since the trajectory started, and I have a sample method that returns the estimated desired velocity by using simple linear interpolation. Since I have an excess of ~1000 control points on average, this is definitely more than accurate enough and it keeps this entire process fast enough to be sampled runtime."),"\n",i.createElement(t.p,null,"Just because I like matplotlib (who doesn't?), I decided to make a simple visualization tool so that one can preview the path & trajectory before actually deploying to the robot. ",i.createElement(t.em,null,"Note: Keep in mind that the trajectory animation isn't 100% accurate, since matplotlib sometimes takes more time to plot the animation than the desired timestep.")),"\n",i.createElement(t.p,null,"You can find the source code for the visualization tool ",i.createElement(t.a,{href:"https://github.com/adham-elarabawy/PyDataAnalysis/tree/master/src/common/interpolation"},"on my github."),"\n",i.createElement(t.em,null,"The file to run is ",i.createElement(t.code,null,"test_interface.py"))),"\n",i.createElement(t.p,null,"Here's a little demo:"),"\n",i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("iframe",{width:"560",height:"315",class:"centered",src:"https://www.youtube.com/embed/E_C7dhMRbvQ",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})),"\n",i.createElement(t.h4,null,"Some fun!"),"\n",i.createElement(t.p,null,"I wanted to make a visualization tool for deriving quintic hermite splines, so while messing around with desmos, I decided to show all the control points, hermite basis functions, xy position/derivative/second derivative functions on the same plot. I found this to be quite aesthetically pleasing."),"\n",i.createElement("div",{style:{display:"flex",justifyContent:"center",alignItems:"center"}},i.createElement("img",{src:"/images/drivetrain_plot.png",alt:"Alt text",title:"Image Title",style:{width:"300px"}})))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?i.createElement(t,e,i.createElement(r,e)):r(e)},l=n(4794),s=n(8838),c=n(2659),d=n(5133),m=n(103),h=n(1101);const u={Link:l.Link};function p(e){let{data:t,children:n}=e;const r=(0,h.xd)(),o="dark"===r.colorScheme?"rgba(255, 255, 255, 0.05)":"rgba(0, 0, 0, 0.05)",p="dark"===r.colorScheme?r.colors.dark[7]:r.colors.gray[0];return i.createElement(s.M,null,i.createElement("div",{style:{minHeight:"100vh",backgroundImage:`\n          linear-gradient(${o} 0.5px, transparent 0.5px),\n          linear-gradient(90deg, ${o} 0.5px, transparent 0.5px)\n        `,backgroundSize:"20px 20px",backgroundPosition:"10px 10px",padding:"20px"}},i.createElement(c.m,null,i.createElement(d.$,{leftSection:i.createElement(m.A,{size:16}),onClick:()=>{(0,l.navigate)("/")},variant:"subtle",color:"dark"===r.colorScheme?"gray.4":"dark",styles:e=>({root:{padding:"8px 16px",transition:"all 0.2s ease","&:hover":{transform:"translateX(-4px)",backgroundColor:"transparent"}}})},"Back to Projects"),i.createElement("div",{style:{backgroundColor:`${p}ee`,padding:"30px",borderRadius:r.radius.md,marginTop:"20px",backdropFilter:"blur(5px)"}},i.createElement("h1",null,t.mdx.frontmatter.title),i.createElement("p",null,t.mdx.frontmatter.description),i.createElement(a.xA,{components:u},n)))))}function g(e){return i.createElement(p,e,i.createElement(o,e))}}}]);
//# sourceMappingURL=component---src-templates-project-page-tsx-content-file-path-src-projects-precision-drivetrain-mdx-e40183a481cd1069b55f.js.map